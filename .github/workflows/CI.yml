name: CI

on:
  push:
    branches:
      - main

jobs:
  validate_and_trigger:
    name: Validate Terraform and Trigger Jenkins Job
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"

      # Step 3: Initialize Terraform without backend
      - name: Terraform Init (Backend Disabled)
        run: terraform init -backend=false

      # Step 4: Format Terraform Configuration
      - name: Terraform Format
        run: |
          terraform fmt -check
          
      # Step 5: Validate Terraform Configuration
      - name: Terraform Validate
        run: terraform validate

      # Step 6: Load configuration from a config file
      - name: Load config
        id: load_config
        run: |
          echo "ENVIRONMENT=$(jq -r .environment config.json)" >> $GITHUB_ENV
          echo "TERRAFORM_ACTION=$(jq -r .terraform_action config.json)" >> $GITHUB_ENV
          echo "JENKINS_JOB=$(jq -r .jenkins_job config.json)" >> $GITHUB_ENV
          echo "JENKINS_URL=$(jq -r .jenkins_url config.json)" >> $GITHUB_ENV
          echo "COMMITTER_EMAIL=${{ github.event.pusher.email }}" >> $GITHUB_ENV  # Get the committer email


      # Step 7: Check Jenkins Reachability
      - name: Check Jenkins Reachability
        run: |
          # Send a curl request to Jenkins and capture both the response body and status code
          response_code=$(curl -w "%{http_code}" -s -o /dev/null -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" "${{ env.JENKINS_URL }}/job/${{ env.JENKINS_JOB }}/api/json")

          # Log the HTTP status code for visibility
          echo "Jenkins HTTP Status Code: $response_code"

          # If the status code is not 200, then log the error and exit with failure
          if [ "$response_code" -ne 200 ]; then
            echo "Error: Jenkins is not reachable. HTTP Status: $response_code"
            exit 1  # Fail the workflow
          else
            echo "Success: Jenkins is reachable. HTTP Status: $response_code"
          fi

      # Step 8: Trigger the Jenkins job with parameters
      - name: Trigger Jenkins Job
        run: |
          # Send a POST request to trigger the Jenkins job and capture the HTTP status code
          response_code=$(curl -w "%{http_code}" -s -o /dev/null -X POST "${{ env.JENKINS_URL }}/job/${{ env.JENKINS_JOB }}/buildWithParameters" \
          --user "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_API_TOKEN }}" \
          --data-urlencode "environment=${{ env.ENVIRONMENT }}" \
          --data-urlencode "Terraform_Action=${{ env.TERRAFORM_ACTION }}") \
          --data-urlencode "committer_email=${{ env.COMMITTER_EMAIL }}"


          # Log the HTTP status code for visibility
          echo "Jenkins HTTP Status Code: $response_code"
          
          # Check if the response code is not 201 (created) to ensure the job was triggered successfully
          if [ "$response_code" -ne 201 ]; then
            echo "Error: Jenkins job was not triggered. HTTP Status: $response_code"
            exit 1  # Fail the workflow
          else
            echo "Success: Jenkins job triggered successfully. HTTP Status: $response_code"
          fi
